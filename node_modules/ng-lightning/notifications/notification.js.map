{"version":3,"file":"notification.js","sourceRoot":"","sources":["../../../../temp/inline/notifications/notification.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, Output, EventEmitter, OnChanges, ElementRef, Renderer2, Optional, ChangeDetectionStrategy} from '@angular/core';\nimport {NglNotificationClose} from './notification-close';\nimport {replaceClass, isInt} from '../util/util';\n\n@Component({\n  selector: 'ngl-notification',\n  template: `\n    <span class=\"slds-assistive-text\">{{assistiveText || severity || 'Info'}}</span><button class=\"slds-button slds-button--icon-inverse slds-notify__close\" *ngIf=\"showClose\" type=\"button\" (click)=\"close('button', $event)\"><svg class=\"slds-button__icon\" nglIcon=\"close\"></svg><span class=\"slds-assistive-text\">{{closeAssistiveText || 'Close'}}</span></button><ng-content></ng-content>\n  `,\n  host: {\n    '[class.slds-notify]': 'true',\n    'role': 'alert',\n  },\n  styles: [\n    `:host.slds-notify--alert {\n      display: block;\n    }`,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nglNotification',\n})\nexport class NglNotification implements OnChanges {\n  @Input() type: 'toast' | 'alert' = 'toast';\n  @Input('severity') set setSeverity(severity: string) {\n    this.severity = severity === 'info' ? null : severity;\n  }\n  @Input() assistiveText: string;\n  @Input() closeAssistiveText: string;\n  @Input() set timeout(timeout: number) {\n    this.clearTimeout();\n    if (isInt(timeout) && timeout >= 0) {\n      this.currentTimeout = setTimeout(() => this.close('timeout'), +timeout);\n    }\n  }\n\n  @Output('nglNotificationClose') closeEventEmitter = new EventEmitter<string>();\n\n  severity: string;\n  showClose = false;\n  private currentTimeout: any = null;\n\n  constructor(public element: ElementRef, public renderer: Renderer2, @Optional() notificationClose: NglNotificationClose) {\n    this.showClose = !!notificationClose;\n  }\n\n  ngOnChanges(changes: any) {\n    const {type: changedType, setSeverity: changedSeverity} = changes;\n    if (changedType) {\n      const previousValue = typeof(changedType.previousValue) === 'string' ? changedType.previousValue : '';\n      replaceClass(this, `slds-notify--${previousValue}`, `slds-notify--${changedType.currentValue}`);\n    }\n    if (changedSeverity) {\n      const previousValue = typeof(changedSeverity.previousValue) === 'string' ? changedSeverity.previousValue : '';\n      replaceClass(this, `slds-theme--${previousValue}`, changedSeverity.currentValue ? `slds-theme--${changedSeverity.currentValue}` : null);\n    }\n  }\n\n  close(reason?: string, $event?: Event) {\n    this.clearTimeout();\n    if ($event) {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n    this.closeEventEmitter.emit(reason);\n  }\n\n  ngOnDestroy() {\n    this.clearTimeout();\n  }\n\n  private clearTimeout() {\n    if (this.currentTimeout !== null) {\n      clearTimeout(this.currentTimeout);\n      this.currentTimeout = null;\n    }\n  }\n}\n"]}