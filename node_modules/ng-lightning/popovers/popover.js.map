{"version":3,"file":"popover.js","sourceRoot":"","sources":["../../../../temp/inline/popovers/popover.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAC,MAAM,eAAe,CAAC;AACnK,OAAO,EAAC,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAC,MAAM,cAAc,CAAC;;IA4C7D,oBAAmB,OAAmB,EAAS,QAAmB,EAAS,cAAiC;QAAzF,YAAO,GAAP,OAAO,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAW;QAAS,mBAAc,GAAd,cAAc,CAAmB;6BA/BlF,IAAI,YAAY,EAAE;6BAElB,IAAI,YAAY,EAAW;mBAmB/C,QAAQ,CAAC,SAAS,CAAC;QAWvB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;;QAGnE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QAE3E,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,kBAAkB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KACtF;0BA/BY,6BAAK;uBAAC,KAAU;YAC3B,YAAY,CAAC,IAAI,EAAE,iBAAe,IAAI,CAAC,MAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,iBAAe,KAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACtF,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;;;;0BAGT,kCAAU;uBAAC,SAAc;YACpC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC;;;;;IAGxH,sBAAI,8BAAM;aAAV,UAAW,SAAoB;YAC7B,YAAY,CAAC,IAAI,EAAE,kBAAgB,IAAI,CAAC,OAAS,EAAE,SAAS,CAAC,CAAC,CAAC,kBAAgB,SAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACjG,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;SAC1B;;;OAAA;0BAKI,kCAAU;;YACb,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAI,IAAI,CAAC,GAAG,aAAU,CAAC,CAAC,CAAC,IAAI,CAAC;;;;;IAepD,oCAAe,GAAf;QACE,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;KAC3B;IAID,uCAAkB,aAAC,GAAU,EAAE,OAAgB;QAC7C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;;gBAxDpC,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,sTAET;iBACF;;;;gBAXwE,UAAU;gBAAqB,SAAS;gBAA5B,iBAAiB;;;kCAcnG,MAAM;kCAEN,MAAM;2BAEN,KAAK;2BACL,KAAK;0BAEL,KAAK;+BAKL,KAAK;+BAWJ,WAAW,SAAC,sBAAsB;uCAqBnC,YAAY,SAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,cAC7C,YAAY,SAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;;qBA3DjD;;SAYa,UAAU","sourcesContent":["import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Renderer2, HostListener, HostBinding} from '@angular/core';\nimport {replaceClass, toBoolean, uniqueId} from '../util/util';\n\nexport type Direction = 'top' | 'right' | 'bottom' | 'left';\n\n@Component({\n  selector: 'ngl-popover',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <header class=\"slds-popover__header\" *ngIf=\"header\"><h2 class=\"slds-text-heading--small\" [id]=\"uid + '-heading'\">{{header}}</h2></header><div class=\"slds-popover__body\" [id]=\"uid\"><ng-content></ng-content></div><footer class=\"slds-popover__footer\" *ngIf=\"footer\">{{footer}}</footer>\n  `,\n})\nexport class NglPopover {\n\n  @Output() afterViewInit = new EventEmitter();\n\n  @Output() onInteraction = new EventEmitter<boolean>();\n\n  @Input() header: string;\n  @Input() footer: string;\n\n  @Input() set theme(theme: any) {\n    replaceClass(this, `slds-theme--${this._theme}`, theme ? `slds-theme--${theme}` : '');\n    this._theme = theme;\n  }\n\n  @Input() set nglTooltip(isTooltip: any) {\n    this.renderer[toBoolean(isTooltip) ? 'addClass' : 'removeClass'](this.element.nativeElement, 'slds-popover--tooltip');\n  }\n\n  set nubbin(direction: Direction) {\n    replaceClass(this, `slds-nubbin--${this._nubbin}`, direction ? `slds-nubbin--${direction}` : '');\n    this._nubbin = direction;\n  }\n\n  uid = uniqueId('popover');\n\n   @HostBinding('attr.aria-labelledby')\n   get labelledby() {\n    return this.header ? `${this.uid}-heading` : null;\n   }\n\n  private _nubbin: Direction;\n  private _theme: string;\n\n  constructor(public element: ElementRef, public renderer: Renderer2, public changeDetector: ChangeDetectorRef) {\n    this.renderer.addClass(this.element.nativeElement, 'slds-popover');\n\n    // Prevent position changes of \"close by\" elements\n    this.renderer.setStyle(this.element.nativeElement, 'position', 'absolute');\n\n    this.renderer.setAttribute(this.element.nativeElement, 'aria-describedby', this.uid);\n  }\n\n  ngAfterViewInit() {\n    this.afterViewInit.emit();\n  }\n\n  @HostListener('mouseenter', ['$event', 'true'])\n  @HostListener('mouseleave', ['$event', 'false'])\n  interactiveHandler(evt: Event, isEnter: boolean) {\n    this.onInteraction.emit(isEnter);\n  }\n\n}\n"]}