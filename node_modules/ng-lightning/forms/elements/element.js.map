{"version":3,"file":"element.js","sourceRoot":"","sources":["../../../../../temp/inline/forms/elements/element.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,YAAY,EAA2C,MAAM,eAAe,CAAC;AACnJ,OAAO,EAAC,QAAQ,EAAE,SAAS,EAAC,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAC,YAAY,EAAC,MAAM,SAAS,CAAC;AACrC,OAAO,EAAC,oBAAoB,EAAE,YAAY,EAAC,MAAM,eAAe,CAAC;;IA8B/D,wBAAsB,QAA2B;QAA3B,aAAQ,GAAR,QAAQ,CAAmB;mBAN3C,QAAQ,CAAC,cAAc,CAAC;wBAEnB,KAAK;KAIqC;IAErD,oCAAW,GAAX,UAAY,OAAa;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,2CAAkB,GAAlB;QACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,KAAK,CAAC,sGAAsG,CAAC,CAAC;SACrH;QACD,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;QAC7B,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;IAED,oCAAW,GAAX,UAAY,QAA0B;QACpC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;KAC9B;IAES,wCAAe,GAAzB;QACE,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,OAAO;QAC5B,IAAI,CAAC,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,WAAS,IAAI,CAAC,GAAK,CAAC,CAAC,CAAC,IAAI,CAAC;KACtE;IAES,qCAAY,GAAtB;QACE,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC1D;;gBAxDF,SAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,QAAQ,EAAE,0pBAET;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,IAAI,EAAE;wBACJ,2BAA2B,EAAE,MAAM;wBACnC,wBAAwB,EAAE,SAAS;qBACpC;oBACD,MAAM,EAAE,CAAC,2BAA2B,CAAC;iBACtC;;;;gBAhBkD,iBAAiB;;;8BAkBjE,YAAY,SAAC,YAAY;6BAEzB,KAAK,SAAC,OAAO;6BACb,YAAY,SAAC,oBAAoB;gCAEjC,KAAK;0BAEL,KAAK;;yBAzBR;;SAiBa,cAAc;AA6C1B,CAAC","sourcesContent":["import {Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, TemplateRef, OnChanges, AfterContentInit} from '@angular/core';\nimport {uniqueId, toBoolean} from '../../util/util';\nimport {NglFormInput} from './input';\nimport {NglFormLabelTemplate, getFormLabel} from '../form-label';\n\n@Component({\n  selector: 'ngl-form-element',\n  template: `\n    <label class=\"slds-form-element__label\" [attr.for]=\"uid\"><abbr class=\"slds-required\" *ngIf=\"required\" title=\"required\">*</abbr><span [nglInternalOutlet]=\"_label\"></span></label><div class=\"slds-form-element__icon\" *ngIf=\"tooltipHelp\"><a [nglPopover]=\"tooltipHelp\" nglPopoverBehavior nglPopoverPlacement=\"top\" nglTooltip><svg class=\"slds-icon slds-icon--x-small slds-icon-text-default\" nglIcon=\"info\"></svg></a><span class=\"slds-assistive-text\">Help</span></div><div class=\"slds-form-element__control\"><ng-content></ng-content></div><div class=\"slds-form-element__help\" *ngIf=\"error\" [id]=\"'error_' + uid\">{{error}}</div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.slds-form-element]': 'true',\n    '[class.slds-has-error]': '!!error',\n  },\n  styles: [`:host { display: block; }`],\n})\nexport class NglFormElement implements OnChanges, AfterContentInit {\n  @ContentChild(NglFormInput) contentEl: NglFormInput;\n\n  @Input('label') labelStr: string;\n  @ContentChild(NglFormLabelTemplate) labelTpl: NglFormLabelTemplate;\n\n  @Input() tooltipHelp: string;\n\n  @Input() error: string;\n\n  uid = uniqueId('form_element');\n\n  required = false;\n\n  _label: TemplateRef<any> | string;\n\n  constructor(protected detector: ChangeDetectorRef) {}\n\n  ngOnChanges(changes?: any) {\n    this.setFormLabel();\n    this.setInputErrorId();\n  }\n\n  ngAfterContentInit() {\n    if (!this.contentEl) {\n      throw Error(`Couldn't find an input, textarea or select with [nglFormControl] attribute inside <ngl-form-element>`);\n    }\n    this.contentEl.id = this.uid;\n    this.setInputErrorId();\n    this.setFormLabel();\n  }\n\n  setRequired(required: string | boolean) {\n    this.required = toBoolean(required);\n    this.detector.markForCheck();\n  }\n\n  protected setInputErrorId() {\n    if (!this.contentEl) return;\n    this.contentEl.describedBy = this.error ? `error_${this.uid}` : null;\n  }\n\n  protected setFormLabel() {\n    this._label = getFormLabel(this.labelStr, this.labelTpl);\n  }\n};\n"]}