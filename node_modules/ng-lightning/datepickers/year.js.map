{"version":3,"file":"year.js","sourceRoot":"","sources":["../../../../temp/inline/datepickers/year.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,uBAAuB,EAAC,MAAM,eAAe,CAAC;AAC9F,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;;;mBAWhC,QAAQ,CAAC,iBAAiB,CAAC;;8BAGC,GAAG;6BACJ,EAAE;0BAMZ,IAAI,YAAY,EAAE;;0BAHtB,sCAAO;uBAAC,IAAqB;YAC9C,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC;;;;;IAIpB,sBAAI,oCAAK;aAAT;YACE,IAAM,WAAW,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/C,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACzE,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;YAC/E,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAC,MAAM,EAAE,IAAI,GAAG,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,UAAC,KAAU,EAAE,KAAa,IAAK,OAAA,SAAS,GAAG,KAAK,EAAjB,CAAiB,CAAC,CAAC;SACpG;;;OAAA;IAED,kCAAM,GAAN,UAAO,MAAc;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC9B;;gBA9BF,SAAS,SAAC;oBACT,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,6SAET;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;mCAME,KAAK;kCACL,KAAK;4BAGL,KAAK,SAAC,MAAM;+BAGZ,MAAM;;4BAtBT;;SAUa,iBAAiB","sourcesContent":["import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy} from '@angular/core';\nimport { uniqueId } from '../util/util';\n\n@Component({\n  selector: 'ngl-date-year',\n  template: `\n    <label class=\"slds-assistive-text\" [attr.for]=\"uid\">Pick a Year</label><div class=\"slds-select_container\"><select class=\"slds-select\" [id]=\"uid\" [ngModel]=\"year\" (ngModelChange)=\"change($event)\"><option *ngFor=\"let yr of range\" [value]=\"yr\">{{yr}}</option></select></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NglDatepickerYear {\n\n  uid = uniqueId('datepicker_year');\n\n  // How many years before and after the current one are selectable in dropdown\n  @Input() numYearsBefore: number = 100;\n  @Input() numYearsAfter: number = 10;\n\n  year: number;\n  @Input('year') set setYear(year: string | number) {\n    this.year = +year;\n  }\n  @Output() yearChange = new EventEmitter();\n\n  get range(): number[] {\n    const currentYear = (new Date()).getFullYear();\n    const firstYear = Math.min(currentYear - this.numYearsBefore, this.year);\n    const size = Math.max(currentYear + this.numYearsAfter, this.year) - firstYear;\n    return Array.apply(null, {length: size + 1}).map((value: any, index: number) => firstYear + index);\n  }\n\n  change($event: string) {\n    this.yearChange.emit($event);\n  }\n}\n"]}