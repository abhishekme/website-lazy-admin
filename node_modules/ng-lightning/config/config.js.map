{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../temp/inline/config/config.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AAG/E,MAAM,CAAC,IAAM,UAAU,GAAG,IAAI,cAAc,CAAa,YAAY,CAAC,CAAC;;IAarE,mBAAgC;;wBARrB,IAAI,YAAY,EAAE;sBAEA;YAC3B,OAAO,EAAE,cAAc;YACvB,aAAa,EAAE,SAAS;YACxB,cAAc,EAAE,SAAS;SAC1B;QAGC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;KAC5D;IAED,0BAAM,GAAN,UAAO,MAAkB;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;QAC3D,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;KACtB;IAED,uBAAG,GAAH,UAAI,GAAW;QACb,OAAa,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC,CAAC;KAChC;;gBAtBF,UAAU;;;;gDAWI,MAAM,SAAC,UAAU;;oBAhBhC;;SAMa,SAAS;;AAyBtB,MAAM,0BAA0B,MAAuC;IAAvC,uBAAA,EAAA,WAAU,sBAAsB,EAAE,IAAI,EAAC;IACrE,OAAO,UAAU,WAAqB;QACpC,gCAAM,sBAAQ,EAAE,4BAAW,CAA2B;QAEtD,WAAW,CAAC,SAAS,CAAC,QAAQ,GAAG;YAAA,iBAiBhC;YAhBC,IAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;YAE9D,IAAI,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE;gBACzD,MAAM,KAAK,CAAC,wDAAqD,MAAM,CAAC,sBAAsB,OAAG,CAAC,CAAC;aACpG;YAED,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC1D,IAAI,KAAI,CAAC,kBAAkB,EAAE;oBAC3B,KAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC3B;gBACD,iBAAiB,CAAC,YAAY,EAAE,CAAC;aAClC,CAAC,CAAC;YAEH,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;SACF,CAAC;QAEF,WAAW,CAAC,SAAS,CAAC,WAAW,GAAG;YAClC,IAAI,IAAI,CAAC,qBAAqB,EAAE;gBAC9B,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;gBACzC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;aACnC;YAED,IAAI,WAAW,EAAE;gBACf,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxB;SACF,CAAC;KACH,CAAC;CACH;AAAA,CAAC","sourcesContent":["import {Injectable, EventEmitter, InjectionToken, Inject} from '@angular/core';\nimport {INglConfig} from './config.interface';\n\nexport const NGL_CONFIG = new InjectionToken<INglConfig>('NGL_CONFIG');\n\n@Injectable()\nexport class NglConfig {\n\n  _emitter = new EventEmitter();\n\n  private values: INglConfig = {\n    svgPath: 'assets/icons',\n    ratingColorOn: '#FFB75D',\n    ratingColorOff: '#54698D',\n  };\n\n  constructor(@Inject(NGL_CONFIG) config: INglConfig = null) {\n    this.values = Object.assign({}, this.values, config || {});\n  }\n\n  update(config: INglConfig) {\n    this.values = Object.assign({}, this.values, config || {});\n    this._emitter.emit();\n  }\n\n  get(key: string) {\n    return (<any>this.values)[key];\n  }\n}\n\n// Intrenal decorator\nexport function NglConfigurable(config = {changeDetectorProperty: 'cd'}) {\n  return function (constructor: Function) {\n    let { ngOnInit, ngOnDestroy } = constructor.prototype;\n\n    constructor.prototype.ngOnInit = function() {\n      const changeDetectorRef = this[config.changeDetectorProperty];\n\n      if (!changeDetectorRef || !changeDetectorRef.markForCheck) {\n        throw Error(`NglConfig: invalid ChangeDetectorRef at property \"${config.changeDetectorProperty}\"`);\n      }\n\n      this.nglConfigSubscription = this.config._emitter.subscribe(() => {\n        if (this.nglOnConfigChanges) {\n          this.nglOnConfigChanges();\n        }\n        changeDetectorRef.markForCheck();\n      });\n\n      if (ngOnInit) {\n        ngOnInit.call(this);\n      }\n    };\n\n    constructor.prototype.ngOnDestroy = function() {\n      if (this.nglConfigSubscription) {\n        this.nglConfigSubscription.unsubscribe();\n        this.nglConfigSubscription = null;\n      }\n\n      if (ngOnDestroy) {\n        ngOnDestroy.call(this);\n      }\n    };\n  };\n};\n"]}