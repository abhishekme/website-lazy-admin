{"version":3,"file":"scope.js","sourceRoot":"","sources":["../../../../temp/inline/lookups/scope.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AACrH,OAAO,EAAC,kBAAkB,EAAC,MAAM,cAAc,CAAC;;IAgB9C,gCAAY,OAAmB,EAAE,QAAmB;2BAL5B,IAAI,YAAY,EAAE;oBAEjB,KAAK;0BACP,IAAI,YAAY,EAAE;QAGvC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;QAC9D,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC;QAClE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;KAC9D;IAED,8CAAa,GAAb,UAAc,KAAU;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;;gBAtBF,SAAS,SAAC;oBACT,QAAQ,EAAE,2BAA2B;oBACrC,QAAQ,EAAE,6tBAET;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;gBATwE,UAAU;gBAAE,SAAS;;;0BAW3F,KAAK;gCACL,MAAM;yBAEN,KAAK;+BACL,MAAM;;iCAfT;;SAUa,sBAAsB;AAgBlC,CAAC","sourcesContent":["import {Component, Input, ChangeDetectionStrategy, Output, EventEmitter, ElementRef, Renderer2} from '@angular/core';\nimport {NglLookupScopeItem} from './scope-item';\n\n@Component({\n  selector: 'ngl-internal-lookup-scope',\n  template: `\n    <span nglDropdown [open]=\"open\" (openChange)=\"openChange.emit($event)\"><ng-content></ng-content><button class=\"slds-button slds-button--icon slds-button-space-left slds-shrink-none\" type=\"button\" nglDropdownTrigger><svg class=\"slds-button__icon\" nglIconCategory=\"utility\" nglIcon=\"down\"></svg></button><div class=\"slds-dropdown slds-dropdown--left\" *ngIf=\"open\"><ul class=\"dropdown__list\"><li class=\"slds-dropdown__item\" *ngFor=\"let s of scope.scopes\" (click)=\"onScopeChange(s)\" (keydown.Enter)=\"onScopeChange(s)\"><a role=\"menuitem\" nglDropdownItem><ng-template [ngTemplateOutlet]=\"scope.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: s }\"></ng-template></a></li></ul></div></span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NglInternalLookupScope {\n  @Input() scope: NglLookupScopeItem;\n  @Output() scopeChange = new EventEmitter();\n\n  @Input() open: boolean = false;\n  @Output() openChange = new EventEmitter();\n\n  constructor(element: ElementRef, renderer: Renderer2) {\n    renderer.addClass(element.nativeElement, 'slds-align-middle');\n    renderer.addClass(element.nativeElement, 'slds-m-left--xx-small');\n    renderer.addClass(element.nativeElement, 'slds-shrink-none');\n  }\n\n  onScopeChange(scope: any) {\n    this.scopeChange.emit(scope);\n  }\n};\n"]}