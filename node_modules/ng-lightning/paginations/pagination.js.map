{"version":3,"file":"pagination.js","sourceRoot":"","sources":["../../../../temp/inline/paginations/pagination.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, EventEmitter, Input, Output, OnChanges, ChangeDetectionStrategy} from '@angular/core';\nimport {toBoolean} from '../util/util';\n\nexport type NglPage = { number: number | string, disabled?: boolean };\n\n@Component({\n  selector: 'ngl-pagination',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"slds-button-group\" role=\"group\"><button class=\"slds-button slds-button--neutral\" *ngIf=\"boundaryLinks\" [disabled]=\"!hasPrevious()\" (click)=\"goto(1)\">{{firstText}}</button><button class=\"slds-button slds-button--neutral\" [disabled]=\"!hasPrevious()\" (click)=\"goto(current - 1)\">{{previousText}}</button><button class=\"slds-button\" *ngFor=\"let page of pages; trackBy:pageTrackBy\" [ngClass]=\"'slds-button--' + (page.number === current ? 'brand' : 'neutral')\" (click)=\"goto(page.number)\" [disabled]=\"page.disabled\">{{page.number}}</button><button class=\"slds-button slds-button--neutral\" [disabled]=\"!hasNext()\" (click)=\"goto(current + 1)\">{{nextText}}</button><button class=\"slds-button slds-button--neutral\" *ngIf=\"boundaryLinks\" [disabled]=\"!hasNext()\" (click)=\"goto(totalPages)\">{{lastText}}</button></div>\n  `,\n  exportAs: 'nglPagination',\n})\nexport class NglPagination implements OnChanges {\n\n  pages: NglPage[] = [];\n\n  current: number;\n  @Input() set page(page: number | string) {\n    this.current = +page;\n  }\n  @Output() pageChange = new EventEmitter<number>();\n\n  @Input() total: number | string;\n  @Input() perPage: number | string = 10;\n  @Input() limit: number | string = 0;\n  @Input() boundaryNumbers: number = 0;\n  @Input() firstText = 'First';\n  @Input() previousText = 'Previous';\n  @Input() nextText = 'Next';\n  @Input() lastText = 'Last';\n\n  @Input() set boundaryLinks(boundaryLinks: string | boolean) {\n    this._boundaryLinks = toBoolean(boundaryLinks);\n  }\n  get boundaryLinks() {\n    return this._boundaryLinks;\n  }\n\n  private totalPages: number;\n  private _boundaryLinks = false;\n\n  hasPrevious() {\n    return this.current > 1;\n  }\n\n  hasNext() {\n    return this.current < this.totalPages;\n  }\n\n  goto(page: number) {\n    if (page === this.current) return;\n    this.pageChange.emit(+page);\n  }\n\n  ngOnChanges(changes?: any) {\n    this.totalPages = Math.ceil(+this.total / +this.perPage);\n\n    const { start, end } = this.limits();\n\n    this.pages = this.getPageArray(start, end);\n\n    if (this.boundaryNumbers > 0) {\n      if (start > 1) {\n        const preGap = this.getPageArray(1, Math.min(start - 1, this.boundaryNumbers));\n        const lastGapNumber = +preGap[preGap.length - 1].number;\n        if (lastGapNumber < start - 1) {\n          this.pages.unshift(this.getGapPage(lastGapNumber, start));\n        }\n        this.pages.unshift(...preGap);\n      }\n\n      if (end < this.totalPages) {\n        const postGap = this.getPageArray(Math.max(this.totalPages - this.boundaryNumbers + 1, end + 1), this.totalPages);\n        const firstGapNumber = +postGap[0].number;\n        if (firstGapNumber > end + 1) {\n          this.pages.push(this.getGapPage(end, firstGapNumber));\n        }\n        this.pages.push(...postGap);\n      }\n    }\n\n    if (this.current > this.totalPages) {\n      setTimeout(() => this.goto(this.totalPages));\n    } else if (!this.current && this.totalPages > 0) {\n      setTimeout(() => this.goto(1));\n    }\n  }\n\n  pageTrackBy(index: number, page: NglPage) {\n    return page.number;\n  }\n\n  get start(): number {\n    return Math.min(Math.max(1 + (+this.current - 1) * +this.perPage, 0), +this.total);\n  }\n\n  get end(): number {\n    return Math.min(this.start + (+this.perPage - 1), +this.total);\n  }\n\n  private getPageArray(start: number, end: number) {\n    return Array.apply(null, {length: end - start + 1}).map((value: any, index: number) => this.getPage(start + index));\n  }\n\n  private getPage(number: string | number, disabled = false): NglPage {\n    return { number, disabled };\n  }\n\n  private getGapPage(before: number, after: number) {\n    const isConsecutive = before + 1 === after - 1;\n    return this.getPage(isConsecutive ? before + 1 : '...', !isConsecutive);\n  }\n\n  /**\n   * Calculate first and last visible page numbers\n   */\n  private limits() {\n    let start = 1, end = this.totalPages;\n\n    if (this.limit < 1) return {start, end};\n\n    // Current page is displayed in the middle of the visible ones\n    start = Math.max(+this.current - Math.floor(+this.limit / 2), 1);\n    end = start + +this.limit - 1;\n\n    // Adjust if limit is exceeded\n    if (end > this.totalPages) {\n      end = this.totalPages;\n      start = Math.max(end - +this.limit + 1, 1);\n    }\n\n    return {start, end};\n  }\n\n}\n"]}