{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../temp/inline/util/util.ts"],"names":[],"mappings":"AAEA,MAAM,oBAAoB,KAAU;IAClC,QAAQ,KAAK,EAAE;QACb,KAAK,EAAE;YACL,OAAO,IAAI,CAAC;QAEd,KAAK,OAAO,CAAC;QACb,KAAK,GAAG;YACN,OAAO,KAAK,CAAC;QAEf;YACE,OAAO,CAAC,CAAC,KAAK,CAAC;KAClB;CACF;;;AAID,MAAM,gBAAgB,KAAU;IAC9B,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;QAChB,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAC1B,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;CACtB;;AAGD,MAAM,mBAAmB,KAAU;IACjC,IAAM,IAAI,GAAG,OAAO,KAAK,CAAC;IAC1B,OAAO,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,UAAU,CAAC,CAAC;CAC9D;;;AAID,IAAI,SAAS,GAAG,CAAC,CAAC;AAClB,MAAM,mBAAmB,MAAc;IAAd,uBAAA,EAAA,cAAc;IACrC,OAAO,SAAO,MAAM,SAAI,EAAE,SAAW,CAAC;CACvC;AAKA,CAAC;AACF,MAAM,uBAAuB,QAAuB,EAAE,QAA2B,EAAE,QAA4B;IAC7G,IAAI,QAAQ,IAAI,QAAQ,KAAK,QAAQ,EAAE;QACrC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;KACrC;IACD,IAAI,QAAQ,EAAE;QACZ,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;KACpC;CACF;AAED,kBAAkB,QAAuB,EAAE,OAA0B,EAAE,KAAc;IACnF,IAAI,OAAO,EAAE;QACX,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC;YACtD,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;SAC1F,CAAC,CAAC;KACJ;CACF","sourcesContent":["import {ElementRef, Renderer2} from '@angular/core';\n\nexport function toBoolean(value: any): boolean {\n  switch (value) {\n    case '':\n      return true;\n\n    case 'false':\n    case '0':\n      return false;\n\n    default:\n      return !!value;\n  }\n}\n\n// Check if given value is integer. Cast strings as potential integers as well.\n// See: http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript\nexport function isInt(value: any): boolean {\n  if (isNaN(value)) {\n    return false;\n  }\n  var x = parseFloat(value);\n  return (x | 0) === x;\n}\n\n// Similar to `lodash.isobject`\nexport function isObject(value: any): boolean {\n  const type = typeof value;\n  return !!value && (type === 'object' || type === 'function');\n}\n\n// Generate a unique id (unique within the entire client session).\n// Useful for temporary DOM ids.\nlet idCounter = 0;\nexport function uniqueId(prefix = 'uid') {\n  return `ngl_${prefix}_${++idCounter}`;\n}\n\nexport interface IReplaceClass {\n  renderer: Renderer2;\n  element: ElementRef;\n};\nexport function replaceClass(instance: IReplaceClass, oldClass: string | string[], newClass?: string | string[]) {\n  if (oldClass && oldClass !== newClass) {\n    setClass(instance, oldClass, false);\n  }\n  if (newClass) {\n    setClass(instance, newClass, true);\n  }\n}\n\nfunction setClass(instance: IReplaceClass, klasses: string | string[], isAdd: boolean) {\n  if (klasses) {\n    (Array.isArray(klasses) ? klasses : [klasses]).forEach(k => {\n      instance.renderer[isAdd ? 'addClass' : 'removeClass'](instance.element.nativeElement, k);\n    });\n  }\n}\n"]}