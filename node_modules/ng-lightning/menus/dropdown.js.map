{"version":3,"file":"dropdown.js","sourceRoot":"","sources":["../../../../temp/inline/menus/dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Input, Output, EventEmitter, HostListener, ElementRef, OnInit, OnDestroy, ContentChildren, QueryList, Renderer2} from '@angular/core';\nimport {NglDropdownItem} from './dropdown-item';\nimport {toBoolean} from '../util/util';\n\nconst openEventEmitter = new EventEmitter<any>();\n\n@Directive({\n  selector: '[nglDropdown]',\n  host: {\n    '[class.slds-dropdown-trigger]': 'true',\n    '[class.slds-dropdown-trigger--click]': 'true',\n  },\n})\nexport class NglDropdown implements OnInit, OnDestroy {\n  @Input('open') set isOpen(isOpen: boolean) {\n    this._isOpen = toBoolean(isOpen);\n\n    if (this.isOpen) {\n      this.clearGlobalClickTimeout();\n      this.globalClickTimeout = setTimeout(() => {\n        if (this.handlePageEvents) {\n          this._subscribeToClickEvents();\n        }\n      });\n\n      this.renderer.addClass(this.element.nativeElement, 'slds-is-open');\n    } else {\n      this._unsubscribeFromClickEvents();\n      this.renderer.removeClass(this.element.nativeElement, 'slds-is-open');\n    }\n\n    this.renderer.setAttribute(this.element.nativeElement, 'aria-expanded', `${this.isOpen}`);\n  }\n  get isOpen() {\n    return this._isOpen;\n  }\n\n  @Input() handlePageEvents = true;\n  @ContentChildren(NglDropdownItem, {descendants: true}) items: QueryList<NglDropdownItem>;\n  @Output('openChange') isOpenChange = new EventEmitter<boolean>();\n\n  triggerFocusEventEmitter = new EventEmitter();\n\n  private _isOpen = false;\n  private openEventSubscription: any;\n  private globalClickEventUnsubscriber: Function = null;\n  private clickEventUnsubscriber: Function = null;\n  private globalClickTimeout: number;\n\n  @HostListener('keydown.esc', ['\"esc\"'])\n  @HostListener('keydown.tab', ['\"tab\"'])\n  onKeydownClose(eventName: string) {\n    this.toggle(false);\n    if (eventName === 'esc') {\n      this.triggerFocusEventEmitter.emit(null);\n    }\n  }\n  @HostListener('keydown.arrowdown', ['$event', '\"next\"'])\n  @HostListener('keydown.arrowup', ['$event', '\"previous\"'])\n  onKeydownFocusNext($event: Event, direction: 'next' | 'previous') {\n    $event.preventDefault();\n    this.focusItem(direction);\n  }\n\n  constructor(public element: ElementRef, public renderer: Renderer2) {}\n\n  ngOnInit() {\n    this.openEventSubscription = openEventEmitter.subscribe(this.handleDropdownOpenEvent.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.clearGlobalClickTimeout();\n    if (this.openEventSubscription) {\n      this.openEventSubscription.unsubscribe();\n    }\n    this._unsubscribeFromClickEvents();\n  }\n\n  toggle(toggle: boolean = !this.isOpen, focus: boolean = false) {\n    if (toggle === this.isOpen) {\n      return;\n    }\n    this.isOpenChange.emit(toggle);\n    if (toggle) {\n      openEventEmitter.emit(this);\n      if (focus) {\n        this.focusItem('next');\n      }\n    }\n  }\n\n  private handleGlobalClickEvent($event: any) {\n    if (!this.handlePageEvents || $event.$nglStop) {\n      return;\n    }\n    this.toggle(false);\n  }\n\n  private _subscribeToClickEvents() {\n    this._unsubscribeFromClickEvents();\n\n    // Prevent document listener to close it, since click happened inside\n    this.clickEventUnsubscriber = this.renderer.listen(this.element.nativeElement, 'click', ($event: any) => $event.$nglStop = true);\n\n    this.globalClickEventUnsubscriber = this.renderer.listen('document', 'click', this.handleGlobalClickEvent.bind(this));\n  }\n\n  private _unsubscribeFromClickEvents() {\n    if (this.clickEventUnsubscriber) {\n      this.clickEventUnsubscriber();\n      this.clickEventUnsubscriber = null;\n    }\n\n    if (this.globalClickEventUnsubscriber) {\n      this.globalClickEventUnsubscriber();\n      this.globalClickEventUnsubscriber = null;\n    }\n  }\n\n  private clearGlobalClickTimeout() {\n    clearTimeout(this.globalClickTimeout);\n  }\n\n  private focusItem(direction: 'next' | 'previous') {\n    if (!this.items.length) {\n      return;\n    }\n    const items = this.items.toArray();\n    const activeElementIndex = items.findIndex(item => item.hasFocus()) + (direction === 'next' ? 1 : -1);\n    if (activeElementIndex === items.length || activeElementIndex < 0) {\n      return;\n    }\n    items[activeElementIndex].focus();\n  }\n\n  private handleDropdownOpenEvent(dropdown: NglDropdown) {\n    if (dropdown !== this) {\n      this.toggle(false);\n    }\n  }\n\n}\n"]}